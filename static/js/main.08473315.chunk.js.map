{"version":3,"sources":["components/header/header.module.css","components/convert-result/convertor-result.module.css","components/currency-list/currency-list.module.css","components/footer/footer.module.css","components/convertor/convertor.module.css","components/Loader/loader.module.css","components/header/header.tsx","components/footer/footer.tsx","mock/currency.js","utils.js","components/convert-result/convert-result.tsx","api/api.js","components/Loader/loader.tsx","components/convertor/convertor.tsx","components/currency-list/currency-list.tsx","mock/languages.js","App.tsx","localization/i18n.js","reportWebVitals.ts","index.tsx"],"names":["module","exports","Header","props","location","useLocation","t","useTranslation","AppBar","position","color","elevation","className","classes","appBar","Toolbar","toolbar","Grid","container","alignItems","spacing","item","xs","Typography","variant","noWrap","toolbarTitle","to","pathname","activeLink","link","Autocomplete","value","baseCurrency","defaultValue","onChange","evt","newValue","onBaseCurrencyChange","options","baseCurrencyList","renderInput","params","TextField","label","margin","baseLanguage","onLanguageChange","languages","Footer","year","Date","getFullYear","footer","Container","maxWidth","component","align","gutterBottom","addToStorage","localStorage","setItem","JSON","stringify","getCurrentDate","dateObject","month","getMonth","date","getDate","ConvertResult","Card","card","CardContent","title","result","CardActions","URL","getCurrentRateList","a","fetch","ok","Promise","reject","json","getConvertedCurrencyList","amount","toCurrency","Loader","mt20","justify","CircularProgress","Convertor","useState","setAmount","currencyType","setCurrencyType","convertValue","setConvertValue","loading","setLoading","convertResult","useEffect","onConvertAmount","data","Math","ceil","console","error","mt30","placeholder","name","Number","target","Button","type","onClick","CurrencyList","currencyList","setCurrencyList","ratesListToArray","Object","entries","rates","updateCurrencyList","TableContainer","Paper","Table","table","TableHead","TableRow","TableCell","TableBody","map","row","index","currentRate","toFixed","App","getItem","parse","setBaseCurrency","setBaseLanguage","i18n","languageToLower","toLocaleLowerCase","changeLanguage","path","exact","use","initReactI18next","init","resources","en","convertor","Brand","ru","translation","Currency","Convert","Result","Copyright","lng","interpolation","escapeValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08473315.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appBar\":\"header_appBar__1zdt2\",\"toolbar\":\"header_toolbar__1-wE-\",\"toolbarTile\":\"header_toolbarTile__3Bmxp\",\"link\":\"header_link__30kk9\",\"activeLink\":\"header_activeLink__aCMng\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"convertor-result_title__1NqUC\",\"card\":\"convertor-result_card__3JftE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mt30\":\"currency-list_mt30__20o0G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__3E50q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mt30\":\"convertor_mt30__3JBbG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mt20\":\"loader_mt20__3ZiHp\"};","import React from 'react';\r\nimport {\r\n  AppBar, Toolbar, Typography, TextField, Grid,\r\n} from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\nimport classes from './header.module.css';\r\n\r\ninterface HeaderProps {\r\n  baseCurrency: string\r\n  baseLanguage: string\r\n  baseCurrencyList: Array<string>\r\n  languages: Array<string>\r\n  onBaseCurrencyChange(currency: any): void\r\n  onLanguageChange(currency: any): void\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = props => {\r\n  const location = useLocation();\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <AppBar position=\"static\" color=\"default\" elevation={1} className={classes.appBar}>\r\n    <Toolbar className={classes.toolbar}>\r\n      <Grid container alignItems=\"center\" spacing={0}>\r\n        <Grid item xs={7}>\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.toolbarTitle}> {t('Brand')}  </Typography>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <NavLink to=\"/\" className={(location.pathname === '/') ? classes.activeLink : classes.link }> {t('Convertor')} </NavLink>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <NavLink to=\"/list\" className={(location.pathname === '/list') ? classes.activeLink : classes.link }> {t('Exchange Rate')} </NavLink>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={3}>\r\n        <Autocomplete\r\n            value={props.baseCurrency}\r\n            defaultValue={props.baseCurrency}\r\n            onChange={(evt, newValue) => props.onBaseCurrencyChange(newValue)}\r\n            options={props.baseCurrencyList}\r\n            renderInput={(params) => (\r\n              <TextField {...params} label={`${t('Base currency')}`} margin=\"normal\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n      </Grid>\r\n      &nbsp;&nbsp;\r\n      <Grid item xs={2}>\r\n        <Autocomplete\r\n            value={props.baseLanguage}\r\n            defaultValue={props.baseLanguage}\r\n            onChange={(evt, newValue) => props.onLanguageChange(newValue)}\r\n            options={props.languages}\r\n            renderInput={(params) => (\r\n              <TextField {...params} label={`${t('Base language')}`} margin=\"normal\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n      </Grid>\r\n    </Toolbar>\r\n    </AppBar>\r\n\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Container, Typography } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport classes from './footer.module.css';\r\n\r\nfunction Footer() {\r\n  const { t } = useTranslation();\r\n  const year = new Date().getFullYear();\r\n  return (\r\n    <footer className={classes.footer}>\r\n      <Container maxWidth=\"lg\">\r\n        <Typography component=\"p\" align=\"center\" gutterBottom> @{year} {t('Copyright')} </Typography>\r\n      </Container>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","export const baseCurrencyList = ['USD', 'RUB', 'KZT', 'AED', 'KGS'];\r\n","import { baseCurrencyList } from './mock/currency';\r\n\r\nexport function addToStorage(item) {\r\n  localStorage.setItem('baseitem', JSON.stringify(item));\r\n}\r\n\r\nexport function getFromStorage() {\r\n  if (!localStorage.getItem('baseitem')) {\r\n    addToStorage(baseCurrencyList[0]);\r\n  }\r\n  return JSON.parse(localStorage.getItem('baseitem'));\r\n}\r\n\r\nexport function getCurrentDate() {\r\n  const dateObject = new Date();\r\n  const year = dateObject.getFullYear();\r\n  const month = dateObject.getMonth() + 1;\r\n  const date = dateObject.getDate();\r\n\r\n  return `${year}-${month < 10 ? `0${month}` : month}-${date}`;\r\n}\r\n","import React from 'react';\r\nimport {\r\n  Typography, Card, CardContent, CardActions,\r\n} from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getCurrentDate } from '../../utils';\r\nimport classes from './convertor-result.module.css';\r\n\r\ninterface ConvertResultProps {\r\n  result: string\r\n}\r\n\r\nconst ConvertResult: React.FC<ConvertResultProps> = props => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <Card className={classes.card}>\r\n    <CardContent>\r\n      <Typography gutterBottom variant=\"h5\" component=\"h2\"> {t('Result')} </Typography>\r\n      <Typography variant=\"h4\" className={classes.title} color=\"textPrimary\" gutterBottom>\r\n        { props.result }\r\n      </Typography>\r\n      <CardActions>\r\n        <Typography variant=\"body2\" component=\"p\"> {getCurrentDate()} </Typography>\r\n      </CardActions>\r\n    </CardContent>\r\n  </Card>\r\n  );\r\n};\r\n\r\nexport default ConvertResult;\r\n","const URL = 'https://v1.nocodeapi.com/ruslan/cx/RgorThEpEQxhOckt/rates';\r\n\r\nexport async function getCurrentRateList(baseCurrency){\r\n  const result = await fetch(`${URL}?source=${baseCurrency}`);\r\n  if (!result.ok) return Promise.reject(`Что то пошло не так: ${result}`);\r\n  return result.json();\r\n}\r\n\r\nexport async function getConvertedCurrencyList(amount, baseCurrency, toCurrency) {\r\n  const result = await fetch(`${URL}/convert?amount=${amount}&from=${baseCurrency}&to=${toCurrency}`);\r\n  if (!result.ok) return Promise.reject(`Что то пошло не так: ${result}`);\r\n  return result.json();  \r\n}\r\n","import React from 'react';\r\nimport { CircularProgress, Grid } from '@material-ui/core';\r\nimport classes from './loader.module.css';\r\n\r\nconst Loader: React.FC = () => {\r\n  return (\r\n    <div className={ classes.mt20 }>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <CircularProgress />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport {\r\n  Typography, Grid, Button, TextField,\r\n} from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { ChangeEvent, useState } from 'react';\r\nimport ConvertResult from '../convert-result/convert-result';\r\nimport { getConvertedCurrencyList } from '../../api/api';\r\nimport { baseCurrencyList } from '../../mock/currency';\r\nimport { useEffect } from 'react';\r\nimport classes from './convertor.module.css';\r\nimport Loader from '../Loader/loader';\r\n\r\ninterface ConvertorProps {\r\n  baseCurrency: string\r\n}\r\n\r\nfunction Convertor(props:ConvertorProps) {\r\n  const { baseCurrency } = props;\r\n  const { t } = useTranslation();\r\n  \r\n  const [amount, setAmount] = useState<number>(0); // Convertable amount\r\n  const [currencyType, setCurrencyType] = useState<string | null>(''); // Currency type on which we will convert\r\n  const [convertValue, setConvertValue] = useState<number | null>(null); // Final amount  \r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const convertResult = `${amount} ${baseCurrency} = ${convertValue} ${currencyType}`;\r\n\r\n  const onAmountChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    setAmount(Number(evt.target.value));\r\n  };\r\n\r\n  useEffect(() => {\r\n    setConvertValue(null);    \r\n  }, [amount, currencyType]);\r\n\r\n  const onConvertAmount = async () => {\r\n    if (amount && currencyType) {\r\n      try {\r\n        setLoading(true);\r\n        const data = await getConvertedCurrencyList(amount, baseCurrency, currencyType);\r\n        setConvertValue(Math.ceil(data.result));\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.mt30}>\r\n      <Grid container justify=\"center\" spacing={2} alignItems=\"center\">\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"h5\"> {t('Convertor')} </Typography>\r\n        </Grid>        \r\n        <Grid item xs={2} spacing={5}>\r\n          <TextField\r\n            placeholder={t('Please add amount')}\r\n            label={`${t('Amount in', {name: baseCurrency})}`}\r\n            variant=\"outlined\"\r\n            onChange={onAmountChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Autocomplete\r\n            options={baseCurrencyList}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label={`${t('Currency type')}`}\r\n                variant=\"outlined\" />\r\n            )}\r\n            onChange={(evt, value) => setCurrencyType(value)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={onConvertAmount}>{`${t('Convert')}`}\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      {\r\n        loading ? ( <Loader /> ) : null \r\n      }\r\n      { convertValue && <ConvertResult result={convertResult} /> }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Convertor;\r\n","import {\r\n  Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography,\r\n} from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getCurrentRateList } from '../../api/api';\r\nimport Loader from '../Loader/loader';\r\nimport classes from './currency-list.module.css';\r\n\r\ninterface CurrencyListProps {\r\n  baseCurrency: string\r\n}\r\n\r\nconst CurrencyList: React.FC<CurrencyListProps> = ({ baseCurrency }) => {\r\n  \r\n  const [currencyList, setCurrencyList] = useState<any>(null);\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const updateCurrencyList = async () => {\r\n      try {\r\n        const data = await getCurrentRateList(baseCurrency);\r\n        const ratesListToArray = Object.entries(data.rates);\r\n        setCurrencyList(ratesListToArray);\r\n      } catch (err){\r\n        console.error(err);\r\n      }\r\n    };\r\n    updateCurrencyList();\r\n  }, [baseCurrency]);\r\n\r\n  return (\r\n    <div className={classes.mt30}>\r\n      <Typography variant=\"h4\"> {t('Exchange Rate')} </Typography> <br/>\r\n      {\r\n        currencyList ? (\r\n          <TableContainer component={Paper}>\r\n          <Table className={classes.table}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>{t('Currency')}</TableCell>\r\n                <TableCell>{t('Base currency')}</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {\r\n                currencyList.map((row: Array<number>, index: number) => {\r\n                  const currentRate = `${row[1].toFixed(2)} ${row[0]}`;\r\n                  return (\r\n                    <TableRow key={index}>\r\n                      <TableCell> { currentRate } </TableCell>\r\n                      <TableCell> 1 {baseCurrency} </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })\r\n              }\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        ) : <Loader />\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencyList;\r\n","const languages = ['EN', 'RU'];\r\n\r\nexport default languages;\r\n","import {\r\n  Container,\r\n} from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Header from './components/header/header';\r\nimport Footer from './components/footer/footer';\r\nimport Convertor from './components/convertor/convertor';\r\nimport CurrencyList from './components/currency-list/currency-list';\r\nimport { addToStorage, getFromStorage } from './utils';\r\nimport { baseCurrencyList } from './mock/currency';\r\nimport { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport languages from './mock/languages';\r\n\r\nconst App: React.FC = () => {\r\n  const [baseCurrency, setBaseCurrency] = useState<string>(getFromStorage());\r\n  const [baseLanguage, setBaseLanguage] = useState<string>(languages[0]);\r\n  const { i18n } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const saveCurrency = () => {\r\n      if (!baseCurrency) return;\r\n      addToStorage(baseCurrency);\r\n    };\r\n    saveCurrency();\r\n    const languageToLower = baseLanguage.toLocaleLowerCase();\r\n    i18n.changeLanguage(languageToLower);\r\n  }, [baseCurrency, baseLanguage]);\r\n\r\n  return (\r\n    <Container>\r\n      <Header\r\n        baseCurrency={baseCurrency}\r\n        baseCurrencyList={baseCurrencyList}\r\n        baseLanguage={baseLanguage}\r\n        languages={languages}\r\n        onBaseCurrencyChange={setBaseCurrency}\r\n        onLanguageChange={setBaseLanguage}\r\n      />\r\n\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <Convertor baseCurrency={baseCurrency} />\r\n        </Route>\r\n        <Route path=\"/list\">\r\n          <CurrencyList baseCurrency={baseCurrency} />\r\n        </Route>\r\n      </Switch>\r\n\r\n      <Footer />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\n// the translations\r\n// (tip move them in a JSON file and import them,\r\n// or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\r\nconst resources = {\r\n  en: {\r\n    convertor: {\r\n      Convertor: 'Convertor',\r\n      Brand: 'Free Convertor',\r\n      'Exchange Rates': 'Exchange Rates',\r\n      'Exchange Rate': 'Exchange Rate',\r\n      'Amount in': 'Amount in {{name}}',\r\n    },\r\n  },\r\n  ru: {\r\n    translation: {\r\n      Convertor: 'Конвертор',\r\n      'Currency list': 'Курс обмена',\r\n      'Currency lists': 'Курсы обмена',\r\n      Currency: 'Валюта',\r\n      'Please add amount': 'Пожалуйста, укажите сумму',\r\n      'Amount in': 'Сумма в {{name}}',\r\n      'Currency type': 'Тип валюты',\r\n      'Base currency': 'Базовая валюта',\r\n      'Base language': 'Язык сайта',\r\n      'Exchange Rate': 'Обмен Валют',\r\n      Convert: 'Конвертировать',\r\n      Result: 'Результат',\r\n      Copyright: 'Все права защищены',\r\n      Brand: 'Онлайн конвертор',\r\n    },\r\n  },\r\n};\r\n\r\ni18n\r\n  .use(initReactI18next) // passes i18n down to react-i18next\r\n  .init({\r\n    resources,\r\n    lng: 'ru', // language to use, more information here: https://www.i18next.com/overview/configuration-options#languages-namespaces-resources\r\n    // you can use the i18n.changeLanguage function to change the language manually: https://www.i18next.com/overview/api#changelanguage\r\n    // if you're using a language detector, do not define the lng option\r\n\r\n    interpolation: {\r\n      escapeValue: false, // react already safes from xss\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport App from './App';\r\nimport './localization/i18n';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}